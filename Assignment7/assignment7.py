# -*- coding: utf-8 -*-
"""assignment7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/172EcyNB_Kl1kq9Cxurzf57F6x1dYYnFF
"""

import numpy as np
#from params import *

#Generating points on a circle
def circ_gen(O,r):
	len = 50
	theta = np.linspace(0,2*np.pi,len)
	x_circ = np.zeros((2,len))
	x_circ[0,:] = r*np.cos(theta)
	x_circ[1,:] = r*np.sin(theta)
	x_circ = (x_circ.T + O).T
	return x_circ

#Generating points on an ellipse
def ellipse_gen(a,b):
	len = 50
	theta = np.linspace(0,2*np.pi,len)
	x_ellipse = np.zeros((2,len))
	x_ellipse[0,:] = a*np.cos(theta)
	x_ellipse[1,:] = b*np.sin(theta)
	return x_ellipse

#Generating points on a parabola
def parab_gen(y,a):
	x = y**2/a
	return x

#Generating points on a standard hyperbola 
def hyper_gen(y):
	x = np.sqrt(1+y**2)
	return x

import numpy as np
import matplotlib.pyplot as plt
from numpy import linalg as LA

#setting up plot
fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal')
len = 100
y = np.linspace(-2,2,len)

#hyper parameters
V = np.array(([0.16,0],[0,-0.3636]))
u = np.array([0,0])
f = 1
Vinv = LA.inv(V)

#Eigenvalues and eigenvectors
D_vec,P = LA.eig(V)
D = np.diag(D_vec)
uconst = u.T@Vinv@u-f
a = np.sqrt(np.abs(uconst/D_vec[0]))
b = np.sqrt(np.abs(uconst/D_vec[1]))


#Affine Parameters
c = -Vinv@u
R =  np.array(([1,0],[0,1]))
ParamMatrix = np.array(([0,a],[b,0]))

#Generating the actual hyperbola
xActualHyperLeft = P@ParamMatrix@R@xStandardHyperLeft+c[:,np.newaxis]
xActualHyperRight = P@ParamMatrix@R@xStandardHyperRight+c[:,np.newaxis]



#Plotting the actual hyperbola
plt.plot(xActualHyperLeft[0,:],xActualHyperLeft[1,:],label='hyperbola',color='g')
plt.plot(xActualHyperRight[0,:],xActualHyperRight[1,:],color='g')


plt.plot(0,-1.6583, 'o',color='b')
plt.text(0 ,-1.2,'v')
plt.plot(0,1.6583, 'o',color='b')
plt.text(0 ,1.2,'v')
plt.plot(0,3, 'o',color='b')
plt.text(0 ,3.1,'f')
plt.plot(0,-3, 'o',color='b')
plt.text(0.2,-3.2,'f')

plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.grid() # minor
plt.axis('equal')

#if using termux
plt.savefig('assignment7.png')
#else

plt.show()